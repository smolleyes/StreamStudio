//load modules
var ytdl = require('ytdl');
var ytapi = require('youtube-api');
var http = require('http');
var https = require('https');
var ytl = require('youtube-dl');
var ip = require('ip');
var request = require('request');
var Iterator = require('iterator').Iterator;

// module vars
var current_search_page=1;
var current_start_index = 1;
var videos_responses = new Array();
var yt = {};
yt.upnp = false;

ytapi.authenticate({
    type: "key"
  , key: "AIzaSyCfZdkBs02DDuD2vJ16e_ppPX8xPPzVmIs"
});


// search videos
yt.searchVideos = function (user_search, page, filters, order, duration, cb){
    videos_responses = new Array();
    var params = {};

    if (filters === '') {
        params = {
                    q:''+user_search+'',
                    maxResults: 25,
                    order: ''+order+'',
                }
    } else if (filters === 'hd') {
        params = {
                    q:              ''+user_search+'',
                    maxResults:  25,
                    order:        ''+order+'',
                    videoDefinition : 'high'
                }
    } else if (filters === '3d') {
        params = {
                    q:              ''+user_search+'',
                    maxResults:  25,
                    order:        ''+order+'',
                    videoDimension : '3d'
                }
    }
    if(duration !== '') {
		params.videoDuration = duration;
	}
    params.part = 'snippet';
    if(page !== 1) {
        params.pageToken = page;
    }
    params.type = 'video';
    try{
        ytapi.search.list(params,
            function( err, data ) {
                console.log(err,data)
            if( err ) {
                cb(err);
            } else {
                console.log(data)
                current_start_index = cb.nextPageToken;
                cb(data);
            }
        });
    }catch(err){
        console.log('searchVideos err: '+err);
    }
}

yt.getVideoStats = function(id,cb) {
    var params = {};
    params.part = "snippet,statistics,contentDetails";
    params.id = id.toString();
    console.log(params)
    try{
        ytapi.videos.list(params,
            function( err, data ) {
            if( err ) {
                cb(err);
            } else  {
                cb(data);
            }
        });
    }catch(err){
        console.log('searchVideos err: '+err);
    }
}

// search related videos
yt.searchRelated = function (vid, page, filters, cb){
    videos_responses = new Array();
    if (page === 1){
        current_start_index = 1;
    } else {
        current_start_index = (page - 1) * 10 + 1;
    }
    var params = {};
    if (filters === '') {
        params = {
                    'start-index' : ''+current_start_index+'',
                    'max-results':  10,
                    'orderby':        'relevance',
                }
    } else if (filters === 'hd') {
        params = {
                    'start-index' : ''+current_start_index+'',
                    'max-results':  10,
                    'orderby':        'relevance',
                    'hd' : true
                }
    } else if (filters === '3d') {
        params = {
                    'start-index' : ''+current_start_index+'',
                    'max-results':  10,
                    'orderby':        'relevance',
                    '3d' : true
                }
    }
    try{
        youtube.feeds.related(vid,params,
            function( err, data ) {
				console.log(data)
            if( err ) {
                cb(err);
            } else  {
                cb(data);
            }
        });
    }catch(err){
        console.log('searchVideos err: '+err);
    }
}

// search in categories
yt.categories = function (query, page, filters,category,duration, cb){
    videos_responses = new Array();
    var params = {};
    var order;
    if(query == '') {
       order  = 'date';
    } else {
        order= 'relevance'
    }

    if (filters === '') {
        params = {
                    q:''+query+'',
                    maxResults: 25,
                    order: ''+order+'',
                }
    } else if (filters === 'hd') {
        params = {
                    q:              ''+query+'',
                    maxResults:  25,
                    order:        ''+order+'',
                    videoDefinition : 'high'
                }
    } else if (filters === '3d') {
        params = {
                    q:              ''+query+'',
                    maxResults:  25,
                    order:        ''+order+'',
                    videoDimension : '3d'
                }
    }
    if(duration !== '') {
        params.videoDuration = duration;
    }
    params.part = 'snippet';
    params.videoCategoryId = category;
    if(page !== 1) {
        params.pageToken = page;
    }
    params.type = 'video';
    try{
        ytapi.search.list(params,
            function( err, data ) {
                console.log(err,data)
            if( err ) {
                cb(err);
            } else {
                console.log(data)
                current_start_index = cb.nextPageToken;
                cb(data);
            }
        });
    }catch(err){
        console.log('searchVideos err: '+err);
    }
}

yt.getVideoInfos = function (video_link,num,total,upnp,ext,settings, cb){
	if (total === 1) {
	    videos_responses = new Array();
	}
    var video = {};
    video.num = num;
    video.total = total;
    video.link = video_link;
    video.cb = cb;
    yt.upnp = upnp;
    yt.extPlayer = ext;
    try {
        ytdl.getInfo(video.link, video, function(err, video, info){
            if(err) {
                console.log("YTDL ERROR : " + err);
                videos_responses[num]=video;
                return;
            } else {
				try {
					video.id = info.video_id;
					video.title = info.title;
					video.views = info.view_count;
					video.thumb =  info.thumbnail_url.replace('https','http');
					video.author = info.author;
					video.duration = info.length_seconds;
					if ( parseInt(info.formats.length) === 0) {
						return;
					}
					var resolutions = {};
					var res = [];
					var count = 0;
                    console.log(info.formats)
					Iterator.iterate(info.formats).forEach(function (format,i) {
						try {
                            var resolution = format.resolution;
                            console.log(resolution,format)
    						if(resolution == null) {
    							return;
    						}
    						var container = format.container;
    						var encoding = format.encoding;
    						if(yt.upnp || yt.extPlayer) {
    							if (in_array(resolution,res) || container == 'flv' || container == '3gp' || container == "webm" ) {
    								return;
    							}
    						} else {
    							if (in_array(resolution,res) || container == 'flv' || container == '3gp' || container == "m4a") {
    								return;
    							}
    						}
    						res.push(resolution);
    						resolutions[resolution] = [];
    						resolutions[resolution]['itag'] = format.itag;
                            resolutions[resolution]['resolution'] = format.resolution;
    						resolutions[resolution]['container'] = container;
    						resolutions[resolution]['cypher'] = true;
                            resolutions[resolution]['upnp'] = upnp;
    						video.resolutions = {};
    						if (info.formats.use_cipher_signature === false) {
    							resolutions[resolution]['cypher'] = false;
    							resolutions[resolution]['link'] = format.url;
    						}
                        } catch(err) {
                            console.log(err)
                        }
					});
					analyseRes(resolutions,video,info,settings);
				} catch(err) {
					console.log(err)
				}
			}
		});
    } catch(err) {
        console.log('getVideoInfos err: '+ err);
    }
}

//playlists
yt.searchPlaylists = function(user_search, page, order,cb){
    videos_responses = new Array();
    var params = {};
    params = {
        q:''+user_search+'',
        maxResults: 25,
        order: ''+order+'',
    }
    params.part = 'snippet';
    if(page !== 1) {
        params.pageToken = page;
    }
    params.type = 'playlist'
    try{
        ytapi.search.list(params,
            function( err, data ) {
                console.log(err,data)
            if( err ) {
                cb(err);
            } else {
                console.log(data)
                current_start_index = cb.nextPageToken;
                cb(data);
            }
        });
    }catch(err){
        console.log('searchVideos err: '+err);
    }
}

//channels
yt.searchChannels = function(user_search, page,order,cb){
    videos_responses = new Array();
    var params = {};
    params = {
        q:''+user_search+'',
        maxResults: 25,
        order: ''+order+'',
    }
    params.part = 'snippet';
    if(page !== 1) {
        params.pageToken = page;
    }
    params.type = 'channel'
    try{
        ytapi.search.list(params,
            function( err, data ) {
                console.log(err,data)
            if( err ) {
                cb(err);
            } else {
                console.log(data)
                current_start_index = cb.nextPageToken;
                cb(data);
            }
        });
    }catch(err){
        console.log('searchVideos err: '+err);
    }
}

yt.getPlaylistFromChannel = function(id,cb) {
    videos_responses = new Array();
    var params = {};
    params = {
        id : id
    }
    params.part = 'contentDetails,statistics,snippet';
    try{
        ytapi.channels.list(params,
            function( err, data ) {
                console.log(err,data)
            if( err ) {
                cb(err);
            } else {
                console.log(data)
                current_start_index = cb.nextPageToken;
                cb(data);
            }
        });
    }catch(err){
        console.log('searchVideos err: '+err);
    }
}

yt.loadSongs = function(plid,length,token,cb){
    videos_responses = new Array();
    var params = {};
    params.part = 'snippet';
    params.maxResults=25;
    params.playlistId = plid;
    if(token) {
        params.pageToken = token;
    }
    try{
        ytapi.playlistItems.list(params,
            function( err, data ) {
                console.log(err,data)
            if( err ) {
                cb(err);
            } else {
                console.log(data)
                current_start_index = cb.nextPageToken;
                cb(data);
            }
        });
    }catch(err){
        console.log('searchVideos err: '+err);
    }
}

yt.loadChannelSongs = function(url,page,cb){
    if (page === 1){
        current_start_index = 1;
    } else {
        current_start_index = (page - 1) * 25 + 1;
    }
    try{
       videos_responses = new Array();
        var url = 'http://'+ip.address()+':8091/?link='+url+'&max-results=25&alt=jsonc&start-index='+current_start_index;
		request(url, function(err, res, body) {
			if (err) return cb(err);
			if (res.statusCode !== 200) {
			  return cb(new Error('Video not found'));
			}
			cb(JSON.parse(body));
		});

        //var req=https.get(url+'&max-results=25&alt=jsonc&start-index='+current_start_index+'');
        //req.on('response',function(response) {
            //var data = new Array();
            //response.on("data", function(chunk) {
                //data.push(chunk);
            //});
            //response.on('end',function(){
                //var datas = JSON.parse(data.join(''));
                //cb(datas);
            //});
        //});
        //req.on('error', function(e) {
            //console.log("Got error: " + e.message);
        //});
        //req.end();
    } catch(err){
        console.log('youtube searchChannels err: '+err);
    }
}

yt.standard = function(page,country,cb){
    videos_responses = new Array();
    var params = {
        regionCode:''+country+'',
        maxResults: 25,
        part: 'snippet',
        chart: 'mostPopular'
    }

    if(page !== 1) {
        params.pageToken = page;
    }

    try{
        ytapi.videos.list(params,
            function( err, data ) {
                console.log(err,data)
            if( err ) {
                cb(err);
            } else {
                console.log(data)
                current_start_index = cb.nextPageToken;
                cb(data);
            }
        });
    }catch(err){
        console.log('searchVideos err: '+err);
    }
}

function analyseRes(resolutions,video,infos,settings) {
	var count = resolutions.length;
	var list = {};
	Object.keys(resolutions).forEach(function(key) {
		list[key] = [];
		var obj = resolutions[key];
		if (obj.cypher === false) {
			list[key] = obj;
			if (Object.keys(resolutions).length === Object.keys(list).length) {
				video.resolutions = list;
				videos_responses[25]=video;
				video.cb(videos_responses);
			}
		} else {
			video.formatLength = Object.keys(resolutions).length;
			getInfos(video,obj,key,settings);
		}
	});
}

function getInfos(video,obj,res,settings) {
    console.log('parse resolution ' + res)
	try {
		var acode = 'bestaudio/best[ext=opus]';
		if(yt.upnp || yt.extPlayer) {
            var resol = settings.resolution.replace('p','') || '720';
            console.log('get upnp link ' + resol)
			var options = ["-f",'[height<=?'+resol+',ext=mp4]','--youtube-skip-dash-manifest','--get-url'];
			video.upnp = true;
		} else if(!yt.upnp && !yt.extPlayer && obj.resolution == "720p" || obj.resolution == "360p") {
            var resol = obj.resolution.replace('p','');
            console.log('get normal link ' + resol)
           var options = ["-f",'[height<=?'+resol+',ext=mp4]','--youtube-skip-dash-manifest','--get-url'];
            video.upnp = false;
        } else {
            console.log('get dash link itag ' + obj.itag + ' ' + acode)
			var options = ['-f', 'bestvideo[height<=?'+resol+',ext=webm]+'+acode,'--youtube-skip-dash-manifest', '--get-url'];
			video.upnp = false;
		}
		ytl.getInfo(video.link,options,function(err, inf){
            console.log(inf)
			if(err) {
                console.log(err)
				yt.upnp=true;
				video.upnp = true;
                var resol = settings.resolution.replace('p','') || '720';
				var options = ["-f",'[height<=?'+resol+',ext=mp4]','--youtube-skip-dash-manifest'];
				ytl.getInfo(video.link,options,function(err, inf){
                    console.log(inf)
					if(err) {
						console.log(err);
						storeVideosInfos(video);
						return;
					} else {
						video.upnp = true;
                        if(inf.requested_formats) {
                          obj['link'] = inf.requested_formats[0].url.trim();
                          if(!yt.upnp && !yt.extPlayer) {
                            obj['linka'] = inf.requested_formats[1].url.trim();
                            video.upnp = false;
                          }
                        } else {
                          obj['link'] = inf.url.trim();
                          if(!yt.upnp && !yt.extPlayer) {
                            obj['linka'] = inf.thumbnail.trim();
                            video.upnp = false;
                          }
                        }
						video.resolutions[res] = obj;
						if (video.formatLength === Object.keys(video.resolutions).length) {
							videos_responses[25]=video;
							video.cb(videos_responses);
						}
					}
				});
			} else {
				video.upnp = true;
                if(inf.requested_formats) {
                  obj['link'] = inf.requested_formats[0].url.trim();
                  if(!yt.upnp && !yt.extPlayer) {
                    obj['linka'] = inf.requested_formats[1].url.trim();
                    video.upnp = false;
                  }
                } else {
                  obj['link'] = inf.url.trim();
                  if(!yt.upnp && !yt.extPlayer) {
                    obj['linka'] = inf.thumbnail.trim();
                    video.upnp = false;
                  }
                }
				video.resolutions[res] = obj;
				if (video.formatLength === Object.keys(video.resolutions).length) {
					videos_responses[25]=video;
					video.cb(videos_responses);
				}
			}
		});
	} catch(err) {
		console.log(err);
	}
}

// store videos and return it in the right order...
function storeVideosInfos(video) {
    console.log(video)
	videos_responses[video.num]=video;
	var count = 0;
	for (var i=0;i<video.total;i++) {
		if ((videos_responses[i] !=='') && (videos_responses[i] !== undefined)){
			count+=1;
		}
	}
	if (count===video.total) {
		video.cb(videos_responses);
		videos_responses = new Array();
	}
}

// functions
function in_array (needle, haystack, argStrict) {
  var key = '',
    strict = !! argStrict;

  if (strict) {
    for (key in haystack) {
      if (haystack[key] === needle) {
        return true;
      }
    }
  } else {
    for (key in haystack) {
      if (haystack[key] == needle) {
        return true;
      }
    }
  }

  return false;
}

function swapHeadAndPosition(array, position) {
    var head  = array[0];
    var other = array[position % array.length];
    array[0] = other;
    array[position] = head;
    return array;
}

module.exports = yt;
